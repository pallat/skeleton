apiVersion: backstage.io/v1beta2
kind: Template
metadata:
  name: gogin-template
  title: Go Gin-Gonic API Template
  description: Create a simple microservice using gRPC and Spring Boot Java
  tags:
    - recommended
    - go
    - REST
spec:
  owner: pallat.anc@cjexpress.co.th
  type: service

  parameters:
    - title: Provide some simple information
      required:
        - component_id
        - owner
        - go_package_name
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
        java_package_name:
          title: Go Package Name
          type: string
          description: Name for the Go package. eg (io.backstage.blah)
        description:
          title: Description
          type: string
          description: Help others understand what this website is for.
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - gitlab.com

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutRender:
          - .github/workflows/*
        values:
          component_id: "{{ parameters.component_id }}"
          description: "{{ parameters.description }}"
          artifact_id: "{{ parameters.component_id }}"
          go_module_name: "{{ parameters.go_module_name }}"
          owner: "{{ parameters.owner }}"
          destination: "{{ parseRepoUrl parameters.repoUrl }}"
          http_port: 8080
    - id: publish
      name: Publish
      action: publish:gitlab
      input:
        allowedHosts: ["gitlab.com"]
        description: "This is {{ parameters.component_id }}"
        repoUrl: "{{ parameters.repoUrl }}"

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: "{{ steps.publish.output.repoContentsUrl }}"
        catalogInfoPath: "/catalog-info.yaml"

  output:
    remoteUrl: "{{ steps.publish.output.remoteUrl }}"
    entityRef: "{{ steps.register.output.entityRef }}"
